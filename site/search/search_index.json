{"config":{"lang":["en"],"separator":"[\\s\\-]+"},"docs":[{"title":"Welcome","text":"<p>OpenPecha is an \ud83d\uddd2\ufe0fe-text and \ud83c\udff7\ufe0fannotations store made available on GitHub and through a set of APIs. </p> <p></p> <p>The project\u2019s primary aim is to facilitate the collection, proofreading, and enrichment of e-texts by leveraging language technology and collaboration.</p>","location":""},{"title":"Key features","text":"<ul> <li>Contains a dataset of more than 13,000 texts that is gradually increasing in quantity and quality through contributions from core members and apps that use our APIs</li> <li>Uses the opf (OpenPecha format), which uses standoff markdown in annotation layers to link to characters in a base text layer</li> <li>Includes a base layer, a table of contents layer, a footnotes layer, and a hyperlinks layer by default</li> <li>Supports virtually unlimited additional layers for witnesses, commentaries, layers of same-type tags, and more</li> <li>Supports changes to the base layer through OpenPecha's Character Coordinate Translation Vector (CCTV), which locks tags in annotation layers to characters in the base layer even as they move   </li> </ul>","location":"#key-features"},{"title":"Benchmarks","text":"","location":"benchmarks/"},{"title":"Partners","text":"","location":"partners/"},{"title":"OpenPecha partners","text":"<p></p> <p>The Buddhist Digital Resource Center is a nonprofit organization dedicated to seeking out, preserving, documenting, and disseminating Buddhist literature.</p> <p></p> <p>Esukhia is a network of schools, teachers, and researchers who specialize in resources dedicated to the Tibetan languages and their textual traditions.</p> <p></p> <p>Indrajala powers Buddhist technology through the gift of data.</p> <p></p> <p>Lotus King Trust supports the propagation and practice of Buddhadharma and the meaningful development of remote Himalayan communities.</p> <p></p> <p>The Kumarajiva Project aims to translate into Chinese all the texts in the Tibetan Buddhist canon that are not currently available in the Chinese canon.</p> <p></p> <p>pecha.jobs provides data sourcing and processing services for individuals and organizations working to preserve and promote the Tibetan language, culture, and religion.</p>","location":"partners/#openpecha-partners"},{"title":"Getting started with the web API","text":"","location":"api/getting-started/"},{"title":"Web API reference","text":"","location":"api/reference/"},{"title":"Background and overview of the dataset","text":"","location":"data/background/"},{"title":"Featured datasets","text":"","location":"data/featured-datasets/"},{"title":"Featured datasets","text":"","location":"data/featured-datasets/#featured-datasets"},{"title":"HFML","text":"<p>HFML stands for The human-friendly markup language</p>","location":"data/hfml/"},{"title":"Import HFML Files","text":"<p>Here is the hfml file kangyur_01 used in following code snippet.</p> <pre><code>from pathlib import Path\n\nfrom openpecha.formatters import HFMLFormatter\n\nhfml_fn = Path(\"tests\") / \"formatters\" / \"hfml\" / \"data\" / \"kangyur_01.txt\"\nm_text = hfml_fn.read_text()\n\nformatter = HFMLFormatter()\n\ntext = formatter.text_preprocess(m_text)\nformatter.build_layers(text, len([text]))\nresult = formatter.get_base_text()\n</code></pre>","location":"data/hfml/#import-hfml-files"},{"title":"Tagset","text":"","location":"data/hfml/#tagset"},{"title":"Pagination tags","text":"","location":"data/hfml/#pagination-tags"},{"title":"<code>[1]</code>","text":"<p>Type: Pagination</p> <p>Syntax: <code>[&lt;page number&gt;]</code></p> <p>Use: Mark for modern pagination information in modern book or arabic page numbers in traditional text layout.</p> <p>Text Sample:</p> <p></p> <p><code>[360]</code> <code>\u0f04\u0f05\u0f0d \u0f0d\u0f62\u0f92\u0fb1\u0f0b\u0f42\u0f62\u0f0b\u0f66\u0f90\u0f51\u0f0b\u0f51\u0f74\u0f0d \u0f51\u0fb7\u0f62\u0fa8\u0f0b\u0f59\u0f40\u0fb2\u0f0b\u0f54\u0fb2\u0f0b\u0f56\u0f62\u0f9f\u0f0b\u0f53\u0f0b\u0f66\u0f71\u0f74\u0f0b\u0f4f\u0fb2\u0f0d \u0f56\u0f7c\u0f51\u0f0b\u0f66\u0f90\u0f51\u0f0b\u0f51\u0f74\u0f0d \u0f46\u0f7c\u0f66\u0f0b\u0f40\u0fb1\u0f72\u0f0b\u0f60\u0f41\u0f7c\u0f62\u0f0b\u0f63\u0f7c\u0f0b\u0f62\u0f56\u0f0b\u0f4f\u0f74\u0f0b\u0f56\u0f66\u0f90\u0f7c\u0f62\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f58\u0f51\u0f7c\u0f0d [..]</code> <code>\u0f51\u0fb2\u0f44\u0f0b\u0f66\u0fb2\u0f7c\u0f44\u0f0b\u0f63\u0fb7\u0f74\u0f44\u0f0b\u0f56\u0f0b\u0f62\u0f72\u0f0b\u0f51\u0f42\u0f66\u0f0b\u0f62\u0f92\u0fb1\u0f74\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f42\u0f53\u0f66\u0f0b\u0f53\u0f0b\u0f56\u0f5e\u0f74\u0f42\u0f66\u0f0b\u0f66\u0f7c\u0f0d \u0f0d\u0f51\u0f7a\u0f0b\u0f53\u0f66\u0f0b\u0f56\u0f45\u0f7c\u0f58\u0f0b\u0f63\u0fa1\u0f53\u0f0b\u0f60\u0f51\u0f66\u0f0b\u0f40\u0fb1\u0f72\u0f66\u0f0b\u0f51\u0f42\u0f7a\u0f0b\u0f66\u0fb3\u0f7c\u0f44\u0f0b\u0f63\u0f94\u0f0b\u0f66\u0fa1\u0f7a\u0f0b\u0f62\u0fa3\u0f58\u0f66\u0f0b\u0f56\u0f7c\u0f66\u0f0b\u0f4f\u0f7a\u0f0b\u0f56\u0f40\u0f60\u0f0b[..]</code> <code>\u0f51\u0f44\u0f0b\u0f51\u0f58\u0f53\u0f0b\u0f54\u0f62\u0f0b\u0f60\u0f42\u0fb1\u0f74\u0f62\u0f0b\u0f62\u0f7c\u0f0d \u0f0d\u0f66\u0f7c\u0f0b\u0f66\u0f7c\u0f60\u0f72\u0f0b\u0f66\u0f90\u0fb1\u0f7a\u0f0b\u0f56\u0f7c\u0f0b\u0f62\u0fa3\u0f58\u0f66\u0f0b\u0f53\u0f72\u0f0b\u0f51\u0f7c\u0f53\u0f0b\u0f58\u0f7a\u0f51\u0f0b\u0f54\u0f0b\u0f51\u0f44\u0f0b\u0f63\u0fa1\u0f53\u0f0b\u0f54\u0f60\u0f72\u0f0b\u0f55\u0fb1\u0f72\u0f62\u0f0b\u0f42\u0f44\u0f0b\u0f66\u0f74\u0f0b\u0f51\u0f42\u0f0b\u0f63\u0f74\u0f66\u0f0b\u0f51\u0f74\u0f56\u0f0b\u0f54\u0f0b\u0f51\u0f44\u0f0b\u0f60\u0f56\u0fb2\u0f63\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f66\u0fa1\u0f74\u0f42\u0f0b[..]</code> </p>","location":"data/hfml/#1"},{"title":"<code>[1a]</code>","text":"<p>Type: Pecha folio pagination</p> <p>Syntax: <code>[&lt;page number&gt;&lt;a/b side&gt;]</code></p> <p>Use: Tag for traditional pecha page numbers spelled out in Tibetan on the front side of a folio.</p> <p>Text Sample:</p> <p></p> <p><code>[180b]</code> <code>\u0f04\u0f05\u0f0d \u0f0d\u0f62\u0f92\u0fb1\u0f0b\u0f42\u0f62\u0f0b\u0f66\u0f90\u0f51\u0f0b\u0f51\u0f74\u0f0d \u0f51\u0fb7\u0f62\u0fa8\u0f0b\u0f59\u0f40\u0fb2\u0f0b\u0f54\u0fb2\u0f0b\u0f56\u0f62\u0f9f\u0f0b\u0f53\u0f0b\u0f66\u0f71\u0f74\u0f0b\u0f4f\u0fb2\u0f0d \u0f56\u0f7c\u0f51\u0f0b\u0f66\u0f90\u0f51\u0f0b\u0f51\u0f74\u0f0d \u0f46\u0f7c\u0f66\u0f0b\u0f40\u0fb1\u0f72\u0f0b\u0f60\u0f41\u0f7c\u0f62\u0f0b\u0f63\u0f7c\u0f0b\u0f62\u0f56\u0f0b\u0f4f\u0f74\u0f0b\u0f56\u0f66\u0f90\u0f7c\u0f62\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f58\u0f51\u0f7c\u0f0d [..]</code> <code>\u0f51\u0fb2\u0f44\u0f0b\u0f66\u0fb2\u0f7c\u0f44\u0f0b\u0f63\u0fb7\u0f74\u0f44\u0f0b\u0f56\u0f0b\u0f62\u0f72\u0f0b\u0f51\u0f42\u0f66\u0f0b\u0f62\u0f92\u0fb1\u0f74\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f42\u0f53\u0f66\u0f0b\u0f53\u0f0b\u0f56\u0f5e\u0f74\u0f42\u0f66\u0f0b\u0f66\u0f7c\u0f0d \u0f0d\u0f51\u0f7a\u0f0b\u0f53\u0f66\u0f0b\u0f56\u0f45\u0f7c\u0f58\u0f0b\u0f63\u0fa1\u0f53\u0f0b\u0f60\u0f51\u0f66\u0f0b\u0f40\u0fb1\u0f72\u0f66\u0f0b\u0f51\u0f42\u0f7a\u0f0b\u0f66\u0fb3\u0f7c\u0f44\u0f0b\u0f63\u0f94\u0f0b\u0f66\u0fa1\u0f7a\u0f0b\u0f62\u0fa3\u0f58\u0f66\u0f0b\u0f56\u0f7c\u0f66\u0f0b\u0f4f\u0f7a\u0f0b\u0f56\u0f40\u0f60\u0f0b[..]</code> <code>\u0f51\u0f44\u0f0b\u0f51\u0f58\u0f53\u0f0b\u0f54\u0f62\u0f0b\u0f60\u0f42\u0fb1\u0f74\u0f62\u0f0b\u0f62\u0f7c\u0f0d \u0f0d\u0f66\u0f7c\u0f0b\u0f66\u0f7c\u0f60\u0f72\u0f0b\u0f66\u0f90\u0fb1\u0f7a\u0f0b\u0f56\u0f7c\u0f0b\u0f62\u0fa3\u0f58\u0f66\u0f0b\u0f53\u0f72\u0f0b\u0f51\u0f7c\u0f53\u0f0b\u0f58\u0f7a\u0f51\u0f0b\u0f54\u0f0b\u0f51\u0f44\u0f0b\u0f63\u0fa1\u0f53\u0f0b\u0f54\u0f60\u0f72\u0f0b\u0f55\u0fb1\u0f72\u0f62\u0f0b\u0f42\u0f44\u0f0b\u0f66\u0f74\u0f0b\u0f51\u0f42\u0f0b\u0f63\u0f74\u0f66\u0f0b\u0f51\u0f74\u0f56\u0f0b\u0f54\u0f0b\u0f51\u0f44\u0f0b\u0f60\u0f56\u0fb2\u0f63\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f66\u0fa1\u0f74\u0f42\u0f0b[..]</code> </p> <p>back to top</p>","location":"data/hfml/#1a"},{"title":"<code>[1a.1]</code>","text":"<p>Type: Pecha pagination</p> <p>Syntax: <code>[&lt;page number&gt;&lt;a/b side&gt;.&lt;line number&gt;]</code></p> <p>Use: Tag for line numbers in traditional pecha layout.</p> <p>Text Sample:</p> <p></p> <p><code>[180b]</code> <code>[180b.1]\u0f04\u0f05\u0f0d \u0f0d\u0f62\u0f92\u0fb1\u0f0b\u0f42\u0f62\u0f0b\u0f66\u0f90\u0f51\u0f0b\u0f51\u0f74\u0f0d \u0f51\u0fb7\u0f62\u0fa8\u0f0b\u0f59\u0f40\u0fb2\u0f0b\u0f54\u0fb2\u0f0b\u0f56\u0f62\u0f9f\u0f0b\u0f53\u0f0b\u0f66\u0f71\u0f74\u0f0b\u0f4f\u0fb2\u0f0d \u0f56\u0f7c\u0f51\u0f0b\u0f66\u0f90\u0f51\u0f0b\u0f51\u0f74\u0f0d \u0f46\u0f7c\u0f66\u0f0b\u0f40\u0fb1\u0f72\u0f0b\u0f60\u0f41\u0f7c\u0f62\u0f0b\u0f63\u0f7c\u0f0b\u0f62\u0f56\u0f0b\u0f4f\u0f74\u0f0b\u0f56\u0f66\u0f90\u0f7c\u0f62\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f58\u0f51\u0f7c\u0f0d [..]</code> <code>[180b.2]\u0f51\u0fb2\u0f44\u0f0b\u0f66\u0fb2\u0f7c\u0f44\u0f0b\u0f63\u0fb7\u0f74\u0f44\u0f0b\u0f56\u0f0b\u0f62\u0f72\u0f0b\u0f51\u0f42\u0f66\u0f0b\u0f62\u0f92\u0fb1\u0f74\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f42\u0f53\u0f66\u0f0b\u0f53\u0f0b\u0f56\u0f5e\u0f74\u0f42\u0f66\u0f0b\u0f66\u0f7c\u0f0d \u0f0d\u0f51\u0f7a\u0f0b\u0f53\u0f66\u0f0b\u0f56\u0f45\u0f7c\u0f58\u0f0b\u0f63\u0fa1\u0f53\u0f0b\u0f60\u0f51\u0f66\u0f0b\u0f40\u0fb1\u0f72\u0f66\u0f0b\u0f51\u0f42\u0f7a\u0f0b\u0f66\u0fb3\u0f7c\u0f44\u0f0b\u0f63\u0f94\u0f0b\u0f66\u0fa1\u0f7a\u0f0b\u0f62\u0fa3\u0f58\u0f66\u0f0b\u0f56\u0f7c\u0f66\u0f0b\u0f4f\u0f7a\u0f0b\u0f56\u0f40\u0f60\u0f0b[..]</code> <code>[180b.3]\u0f51\u0f44\u0f0b\u0f51\u0f58\u0f53\u0f0b\u0f54\u0f62\u0f0b\u0f60\u0f42\u0fb1\u0f74\u0f62\u0f0b\u0f62\u0f7c\u0f0d \u0f0d\u0f66\u0f7c\u0f0b\u0f66\u0f7c\u0f60\u0f72\u0f0b\u0f66\u0f90\u0fb1\u0f7a\u0f0b\u0f56\u0f7c\u0f0b\u0f62\u0fa3\u0f58\u0f66\u0f0b\u0f53\u0f72\u0f0b\u0f51\u0f7c\u0f53\u0f0b\u0f58\u0f7a\u0f51\u0f0b\u0f54\u0f0b\u0f51\u0f44\u0f0b\u0f63\u0fa1\u0f53\u0f0b\u0f54\u0f60\u0f72\u0f0b\u0f55\u0fb1\u0f72\u0f62\u0f0b\u0f42\u0f44\u0f0b\u0f66\u0f74\u0f0b\u0f51\u0f42\u0f0b\u0f63\u0f74\u0f66\u0f0b\u0f51\u0f74\u0f56\u0f0b\u0f54\u0f0b\u0f51\u0f44\u0f0b\u0f60\u0f56\u0fb2\u0f63\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f66\u0fa1\u0f74\u0f42\u0f0b[..]</code> </p> <p>back to top</p>","location":"data/hfml/#1a1"},{"title":"TOC tags","text":"<p><code>{T###}</code> text ID</p> <p><code>{T###-##}</code> section/chapter ID</p> <p>back to top</p>","location":"data/hfml/#toc-tags"},{"title":"Footnote tags","text":"<p><code>[^##]</code> inline note marker <code>[^##]:</code> note content prefix</p>","location":"data/hfml/#footnote-tags"},{"title":"Endnote tags without page reference","text":"<p><code>(##)</code> endnote marker <code>(##):</code> endnote content prefix</p> <p><code>[###](##):</code> endnote content prefix</p>","location":"data/hfml/#endnote-tags-without-page-reference"},{"title":"<code>(1)</code>","text":"<p>Type: Note maker</p> <p>Syntax: <code>(&lt;note number&gt;)]</code></p> <p>Use: Marker for both footnotes and endnotes</p> <p>Text Sample:</p> <p></p> <p><code>[517]</code> <code>\u0f04\u0f05\u0f0d \u0f0d\u0f46\u0f7c\u0f66\u0f0b\u0f40\u0fb1\u0f72\u0f0b\u0f60\u0f41\u0f7c\u0f62\u0f0b\u0f63\u0f7c\u0f0b\u0f62\u0f56\u0f0b\u0f4f\u0f74\u0f0b\u0f56\u0f66\u0f90\u0f7c\u0f62\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f58\u0f51\u0f7c\u0f0d(1)</code></p> <p>back to top</p>","location":"data/hfml/#1_1"},{"title":"<code>[100](1):</code>","text":"<p>Type: Endnote content prefix</p> <p>Syntax: <code>[&lt;page reference&gt;](&lt;note number&gt;)]</code></p> <p>Use: Marker for the content of endnotes located at the end of texts.</p> <p>Text Sample:</p> <p></p> <p><code>[517](1) \u0f58\u0f5a\u0f53\u0f0b\u0f56\u0fb1\u0f44\u0f0b\u0f60\u0f51\u0f72\u0f0b\u0f46\u0f7c\u0f66\u0f0b\u0f5a\u0f53\u0f0b\u0f60\u0f51\u0f72\u0f60\u0f72\u0f0b\u0f58\u0f5a\u0f53\u0f0b\u0f56\u0f7c\u0f51\u0f0b\u0f66\u0f90\u0f51\u0f0b\u0f51\u0f74\u0f0b\u0f66\u0fa8\u0f7c\u0f66\u0f0b\u0f54\u0f0b[..]</code> <code>\u0f58\u0f51\u0f7c\u0f0b\u0f5a\u0f53\u0f0b\u0f56\u0f45\u0f74\u0f0b\u0f42\u0f66\u0f74\u0f58\u0f0b\u0f66\u0fa3\u0f62\u0f0b\u0f50\u0f44\u0f0b\u0f54\u0f62\u0f0b\u0f51\u0f74\u0f0b\u0f58\u0f51\u0f7c\u0f0b\u0f68\u0f0b\u0f54\u0f60\u0f72\u0f0b\u0f42\u0f64\u0f58\u0f0b\u0f51\u0f74\u0f0b[..]</code></p> <p>back to top</p>","location":"data/hfml/#1001"},{"title":"Spell-checking tags","text":"<p>Type: potential error, correction suggestion</p> <p>Syntax: <code>(error,suggestion)</code> </p> <p>Use: Marker for the content of endnotes located at the end of texts.</p> <p>Text Sample:</p>","location":"data/hfml/#spell-checking-tags"},{"title":"Critical aparatus","text":"<p><code>[? ]</code> uncertain reading</p> <p><code>\\&lt;* \\&gt;</code> editorial restoration of lost text</p> <p><code>\u27e8* \u27e9</code> editorial addition of omitted text</p> <p><code>\u27ea \u27eb</code> scribal insertion</p> <p><code>{ }</code> editorial deletion of redundant text</p> <p><code>{{ }}</code> scribal deletion</p> <p><code>///</code> textual loss at left or right edge of support</p>","location":"data/hfml/#critical-aparatus"},{"title":"Layout tags","text":"\u0f56\u0f7c\u0f51\u0f0d bo \u0f68\u0f72\u0f53\u0f0d en \u0f62\u0f9f\u0f42\u0f66\u0f0d tag \u0f51\u0f54\u0f7a\u0f62\u0f0b\u0f56\u0f62\u0f97\u0f7c\u0f51\u0f0d Example     \u0f61\u0f72\u0f42\u0f0b\u0f46\u0f74\u0f44\u0f0b\u0f0d contains smaller text size \\ \\   \u0f58\u0f5b\u0f51\u0f0b\u0f54\u0f0b\u0f54\u0f7c\u0f0d Name\\ of an author, personal or corporate, of a work. \\ \\   \u0f51\u0f54\u0f7a\u0f0b\u0f46\u0f60\u0f72\u0f0b\u0f58\u0f5a\u0f53\u0f0b\u0f56\u0fb1\u0f44\u0f0b\u0f0d contains pecha title \\ \\   \u0f54\u0f7c\u0f0b\u0f4f\u0f72\u0f60\u0f72\u0f0b\u0f58\u0f5a\u0f53\u0f0b\u0f56\u0fb1\u0f44\u0f0b\u0f0d contains poti title \\ \\   \u0f63\u0f7a\u0f60\u0f74\u0f0b\u0f61\u0f72\u0f0b\u0f58\u0f5a\u0f53\u0f0b\u0f56\u0fb1\u0f44\u0f0b\u0f0d contains chapter title \\ \\","location":"data/hfml/#layout-tags"},{"title":"Notes","text":"<ul> <li>we don't encode lines as annotations and generate them on the fly from the pagination layer and line returns in the base</li> </ul>","location":"data/hfml/#notes"},{"title":"Sources","text":"<ul> <li>https://ubsicap.github.io/usfm/</li> <li>[gandhari.org]\\&lt;https://gandhari.org/a_dpreface.php&gt;</li> <li>[esukhia/derge-kangyur]\\&lt;https://github.com/Esukhia/derge-kangyur&gt;</li> <li>https://www.markdownguide.org/extended-syntax/#fn:bignote</li> </ul>","location":"data/hfml/#sources"},{"title":"Library toolkit API","text":"<p>All the annotations in OPF are just span of start and end character the base layer and some attributes of the particular annotation. The most simplest form of annotation is just having the a span. Here is the list of annotation currently supported by OpenPecha.</p> <p>Annotations in OpenPecha are broadly categorized into Physical and Semantic annotations.</p>","location":"data/library-api/"},{"title":"Semantic Annotations","text":"<p>Any annotations from the Verbal text</p>","location":"data/library-api/#semantic-annotations"},{"title":"Citation","text":"<p>Citation</p>  JSON Schema <pre><code>{\n  \"title\": \"Citation\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"span\": {\n      \"$ref\": \"#/definitions/Span\"\n    },\n    \"metadata\": {\n      \"title\": \"Metadata\",\n      \"default\": {},\n      \"type\": \"object\"\n    }\n  },\n  \"required\": [\n    \"span\"\n  ],\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Span\": {\n      \"title\": \"Span\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"start\": {\n          \"title\": \"Start\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"end\": {\n          \"title\": \"End\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"start\",\n        \"end\"\n      ],\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre>   Python example <pre><code>from openpecha.core.annotations import Citation, Span\n\ncitation = Citation(span=Span(start=10, end=30))\n\nassert citation.span.start == 10\n</code></pre>","location":"data/library-api/#citation"},{"title":"Correction","text":"<p>Correction</p>  JSON Schema <pre><code>{\n  \"title\": \"Correction\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"span\": {\n      \"$ref\": \"#/definitions/Span\"\n    },\n    \"metadata\": {\n      \"title\": \"Metadata\",\n      \"default\": {},\n      \"type\": \"object\"\n    }\n  },\n  \"required\": [\n    \"span\"\n  ],\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Span\": {\n      \"title\": \"Span\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"start\": {\n          \"title\": \"Start\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"end\": {\n          \"title\": \"End\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"start\",\n        \"end\"\n      ],\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre>   Python example <pre><code>from openpecha.core.annotations import Correction, Span\n\ncorrection = Correction(span=Span(start=10, end=30))\n\nassert correction.span.start == 10\n</code></pre>","location":"data/library-api/#correction"},{"title":"ErrorCandidate","text":"<p>ErrorCandidate</p>  JSON Schema <pre><code>{\n  \"title\": \"ErrorCandidate\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"span\": {\n      \"$ref\": \"#/definitions/Span\"\n    },\n    \"metadata\": {\n      \"title\": \"Metadata\",\n      \"default\": {},\n      \"type\": \"object\"\n    }\n  },\n  \"required\": [\n    \"span\"\n  ],\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Span\": {\n      \"title\": \"Span\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"start\": {\n          \"title\": \"Start\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"end\": {\n          \"title\": \"End\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"start\",\n        \"end\"\n      ],\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre>   Python example <pre><code>from openpecha.core.annotations import ErrorCandidate, Span\n\nerror_candidate = ErrorCandidate(span=Span(start=10, end=30))\n\nassert error_candidate.span.start == 10\n</code></pre>","location":"data/library-api/#errorcandidate"},{"title":"Pedurma","text":"<p>Pedurma</p>  JSON Schema: <pre><code>{\n  \"title\": \"Pedurma\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"span\": {\n      \"$ref\": \"#/definitions/Span\"\n    },\n    \"metadata\": {\n      \"title\": \"Metadata\",\n      \"default\": {},\n      \"type\": \"object\"\n    }\n  },\n  \"required\": [\n    \"span\"\n  ],\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Span\": {\n      \"title\": \"Span\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"start\": {\n          \"title\": \"Start\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"end\": {\n          \"title\": \"End\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"start\",\n        \"end\"\n      ],\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre>   Python example: <pre><code>from openpecha.core.annotations import Pedurma, Span\n\npedurma = Pedurma(span=Span(start=10, end=30))\n\nassert pedurma.span.start == 10\n</code></pre>","location":"data/library-api/#pedurma"},{"title":"Sabche","text":"<p>Sabche</p>  JSON Schema <pre><code>{\n  \"title\": \"Sabche\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"span\": {\n      \"$ref\": \"#/definitions/Span\"\n    },\n    \"metadata\": {\n      \"title\": \"Metadata\",\n      \"default\": {},\n      \"type\": \"object\"\n    }\n  },\n  \"required\": [\n    \"span\"\n  ],\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Span\": {\n      \"title\": \"Span\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"start\": {\n          \"title\": \"Start\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"end\": {\n          \"title\": \"End\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"start\",\n        \"end\"\n      ],\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre>   Python example <pre><code>from openpecha.core.annotations import Sabche, Span\n\nsabche = Sabche(span=Span(start=10, end=30))\n\nassert sabche.span.start == 10\n</code></pre>","location":"data/library-api/#sabche"},{"title":"Tsawa","text":"<p>Tsawa</p>  JSON Schema <pre><code>{\n  \"title\": \"Tsawa\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"span\": {\n      \"$ref\": \"#/definitions/Span\"\n    },\n    \"metadata\": {\n      \"title\": \"Metadata\",\n      \"default\": {},\n      \"type\": \"object\"\n    }\n  },\n  \"required\": [\n    \"span\"\n  ],\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Span\": {\n      \"title\": \"Span\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"start\": {\n          \"title\": \"Start\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"end\": {\n          \"title\": \"End\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"start\",\n        \"end\"\n      ],\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre>   Python example <pre><code>from openpecha.core.annotations import Span, Tsawa\n\ntsawa = Tsawa(span=Span(start=10, end=30))\n\nassert tsawa.span.start == 10\n</code></pre>","location":"data/library-api/#tsawa"},{"title":"Yigchung","text":"<p>Yigchung</p>  JSON Schema <pre><code>{\n  \"title\": \"Yigchung\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"span\": {\n      \"$ref\": \"#/definitions/Span\"\n    },\n    \"metadata\": {\n      \"title\": \"Metadata\",\n      \"default\": {},\n      \"type\": \"object\"\n    }\n  },\n  \"required\": [\n    \"span\"\n  ],\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Span\": {\n      \"title\": \"Span\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"start\": {\n          \"title\": \"Start\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"end\": {\n          \"title\": \"End\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"start\",\n        \"end\"\n      ],\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre>   Python example <pre><code>from openpecha.core.annotations import Span, Yigchung\n\nyigchung = Yigchung(span=Span(start=10, end=30))\n\nassert yigchung.span.start == 10\n</code></pre>","location":"data/library-api/#yigchung"},{"title":"Archaic","text":"<p>Archaic</p>  JSON Schema <pre><code>{\n  \"title\": \"Archaic\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"span\": {\n      \"$ref\": \"#/definitions/Span\"\n    },\n    \"metadata\": {\n      \"title\": \"Metadata\",\n      \"default\": {},\n      \"type\": \"object\"\n    }\n  },\n  \"required\": [\n    \"span\"\n  ],\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Span\": {\n      \"title\": \"Span\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"start\": {\n          \"title\": \"Start\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"end\": {\n          \"title\": \"End\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"start\",\n        \"end\"\n      ],\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre>   Python example <pre><code>from openpecha.core.annotations import Archaic, Span\n\narchaic = Archaic(span=Span(start=10, end=30))\n\nassert archaic.span.start == 10\n</code></pre>","location":"data/library-api/#archaic"},{"title":"Durchen","text":"<p>Durchen</p>  JSON Schema <pre><code>{\n  \"title\": \"Durchen\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"span\": {\n      \"$ref\": \"#/definitions/Span\"\n    },\n    \"metadata\": {\n      \"title\": \"Metadata\",\n      \"default\": {},\n      \"type\": \"object\"\n    },\n    \"default\": {\n      \"title\": \"Default\",\n      \"description\": \"text_name of the default option\",\n      \"type\": \"string\"\n    },\n    \"options\": {\n      \"title\": \"Options\",\n      \"description\": \"all other spell options in dict of {text_name, option}\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"required\": [\n    \"span\",\n    \"default\",\n    \"options\"\n  ],\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Span\": {\n      \"title\": \"Span\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"start\": {\n          \"title\": \"Start\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"end\": {\n          \"title\": \"End\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"start\",\n        \"end\"\n      ],\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre>   Python example <pre><code>from openpecha.core.annotations import Durchen, Span\n\nbase = \"\u0f66\u0f7a\u0f58\u0f66\u0f0b\u0f45\u0f53\u0f0b\u0f62\u0fa3\u0f58\u0f66\u0f0b\u0f63\u0f0b\u0f66\u0fb3\u0f74\u0f0b\u0f56\u0f0b\u0f61\u0f72\u0f0d\"\ndurchen = Durchen(\n    span=Span(start=15, end=18),\n    default=\"\u0f66\u0fa1\u0f7a\u0f0d\",\n    options={\"\u0f45\u0f7c\u0f0d\": \"\u0f66\u0fb3\u0f74\u0f0b\", \"\u0f54\u0f7a\u0f0d\": \"\u0f56\u0f66\u0fb3\u0f74\u0f0d\", \"\u0f66\u0fa3\u0f62\u0f0d\": \"\u0f56\u0f66\u0fb3\u0f74\u0f0d\"},\n)\n\nassert base[durchen.span.start : durchen.span.end + 1] == \"\u0f66\u0fb3\u0f74\u0f0b\"\n</code></pre>","location":"data/library-api/#durchen"},{"title":"Footnote","text":"<p>Footnote</p>  JSON Schema <pre><code>{\n  \"title\": \"Footnote\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"span\": {\n      \"$ref\": \"#/definitions/Span\"\n    },\n    \"metadata\": {\n      \"title\": \"Metadata\",\n      \"default\": {},\n      \"type\": \"object\"\n    }\n  },\n  \"required\": [\n    \"span\"\n  ],\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Span\": {\n      \"title\": \"Span\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"start\": {\n          \"title\": \"Start\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"end\": {\n          \"title\": \"End\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"start\",\n        \"end\"\n      ],\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre>   Python example <pre><code>from openpecha.core.annotations import Footnote, Span\n\nfootnote = Footnote(span=Span(start=10, end=30))\n\nassert footnote.span.start == 10\n</code></pre>","location":"data/library-api/#footnote"},{"title":"Segment","text":"<p>Segment of an alignment</p>  JSON Schema <pre><code>{\n  \"title\": \"Segment\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"span\": {\n      \"$ref\": \"#/definitions/Span\"\n    },\n    \"metadata\": {\n      \"title\": \"Metadata\",\n      \"default\": {},\n      \"type\": \"object\"\n    }\n  },\n  \"required\": [\n    \"span\"\n  ],\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Span\": {\n      \"title\": \"Span\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"start\": {\n          \"title\": \"Start\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"end\": {\n          \"title\": \"End\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"start\",\n        \"end\"\n      ],\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre>   Python example <pre><code>from openpecha.core.annotations import Segment, Span\n\nsegment = Segment(span=Span(start=10, end=30))\n\nassert segment.span.start == 10\n</code></pre>","location":"data/library-api/#segment"},{"title":"Physical Annotations","text":"","location":"data/library-api/#physical-annotations"},{"title":"BookTitle","text":"<p>Title of the book</p>","location":"data/library-api/#booktitle"},{"title":"SubTitle","text":"<p>Sub title of the book</p>","location":"data/library-api/#subtitle"},{"title":"Edition","text":"<p>It can be Edition number/name. Previously called BookNumber.</p>","location":"data/library-api/#edition"},{"title":"Author","text":"<p>author of the book</p>","location":"data/library-api/#author"},{"title":"Chapter","text":"<p>Chapter title</p>","location":"data/library-api/#chapter"},{"title":"Text","text":"<p>Represents text and used in Index layer.</p>","location":"data/library-api/#text"},{"title":"SubText","text":"<p>Represents Sub text and used in Index layer.</p>","location":"data/library-api/#subtext"},{"title":"Pagination","text":"<p>Represents the single page of a text.</p>  JSON Schema <pre><code>{\n  \"title\": \"Pagination\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"span\": {\n      \"$ref\": \"#/definitions/Span\"\n    },\n    \"metadata\": {\n      \"title\": \"Metadata\",\n      \"default\": {},\n      \"type\": \"object\"\n    },\n    \"page_info\": {\n      \"title\": \"Page Info\",\n      \"description\": \"page payload\",\n      \"type\": \"string\"\n    },\n    \"imgnum\": {\n      \"title\": \"Imgnum\",\n      \"description\": \"image sequence number\",\n      \"type\": \"integer\"\n    },\n    \"order\": {\n      \"title\": \"Order\",\n      \"description\": \"order of the page\",\n      \"type\": \"integer\"\n    },\n    \"reference\": {\n      \"title\": \"Reference\",\n      \"description\": \"can be url or just string indentifier of source page\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"span\"\n  ],\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Span\": {\n      \"title\": \"Span\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"start\": {\n          \"title\": \"Start\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        },\n        \"end\": {\n          \"title\": \"End\",\n          \"minimum\": 0,\n          \"type\": \"integer\"\n        }\n      },\n      \"required\": [\n        \"start\",\n        \"end\"\n      ],\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre>   Python example <pre><code>from openpecha.core.annotations import Pagination, Span\n\npagination = Pagination(span=Span(start=10, end=30))\n\nassert pagination.span.start == 10\n</code></pre>","location":"data/library-api/#pagination"},{"title":"OPF Format","text":"","location":"data/opf-format/"},{"title":"OpenPecha Repositories","text":"<p>OpenPecha etexts are stored as Git repositories. At its heart, Git is a version control system that manages and stores revisions of digital projects. OpenPecha simply uses Git to store and manage versions of Tibetan texts. Within the Git system, OPF files come with the following branches:</p> <ul> <li>Master<ul> <li>The master branch contains the .opf, which is protected</li> <li>Only admins and text owners can directly update the master branch from the other online branches</li> </ul> </li> <li>Publication<ul> <li>The publication branch is for collaboratively improving the text</li> <li>Only admin or text owners can merge changes from the publication branch to the master branch</li> <li>Github action is set up in such a way that it looks for commands issued by the owner in the commits, then updates the .opf in the master branch if there are changes in the publication branch</li> </ul> </li> <li>Custom repos:<ul> <li>This is where users outside of the collaboration team can edit text and export the text into a desirable format\u2014so long as the parser can handle the user\u2019s specifications, they can collaborate with OpenPecha to create it</li> <li>These edits are not recorded, so they are not used for updating the master branch OPF</li> <li>The exported text is released in the \u201ctemp\u201d section of the release</li> </ul> </li> <li>Releases<ul> <li>Initial section contains the src text as-is; they may be plain text, ebook, HFML, word, etc</li> <li>Temp section contains the exported text of the user outside of the collaboration</li> <li>V### section contains the official release of the exported text</li> </ul> </li> </ul>","location":"data/opf-format/#openpecha-repositories"},{"title":"OPF Files","text":"<p>OPF is an open folder format, which means it\u2019s not a compiled file, but simply an open folder with a specific hierarchy. Every OpenPecha file consists of a base text (or base texts, in the case of works with multiple volumes) in plain text (ie, v001.txt, also called the base layer) in the \u201cbase\u201d folder and its annotations (layer_name.yml) in the corresponding \u201cv001\u201d folder of the \u201clayers\u201d folder. OPF assumes that pecha with a single base layer has only one volume. A sample OPF file might have an internal structure something like this :</p> <ul> <li>\ud83d\udcc1  P000780.opf<ul> <li>\ud83d\udcc4 index.yml</li> <li>\ud83d\udcc4 meta.yml</li> <li>\ud83d\udcc1 base<ul> <li>v001.txt</li> <li>v002.txt</li> </ul> </li> <li>\ud83d\udcc1 layers<ul> <li>\ud83d\udcc1 v001<ul> <li>\ud83d\udcc4 Title.yml</li> <li>\ud83d\udcc4 Author.yml</li> <li>\ud83d\udcc4 Tsawa.yml</li> <li>\ud83d\udcc4 Yigchung.yml</li> </ul> </li> <li>\ud83d\udcc1 v002<ul> <li>\ud83d\udcc4 title.yml</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>or follow this live example P0000001</p> <p>In the example above, the text has the globally unique and persistent identifier \u201cP000780\u201d; its source text is the \u201cbase\u201d directory. (In this case, it comes from an image scan and its raw OCR data found in the github release \u201cv0.1\u201d). It is then formatted as an OPF base text. This OPF has annotation layers for metadata (meta.yml), index/toc (index.yml), and titles (title.yml). \u201cLayers\u201d is simply a list of the annotation layers that are linked to the text, and \u201ctitle\u201d is a layer that gives formatting annotations for titles (similar to the  inline tag in HTML).</p> <p>The key to the format is the Index. The Index splits a text into subsections, and gives these sections unique identifiers (UUIDs). These logical units, for convenience\u2019s sake, use the source document\u2019s splits. Any annotation reference is also then stored in the Index as a unique ID associated with a span of characters. Whenever there\u2019s a change to the base text, these spans are updated. Whenever an annotation is referred to outside the Index, however, it isn\u2019t referred to as a span (as it is in a tag system like XML, for example), but as an ID.</p>","location":"data/opf-format/#opf-files"},{"title":"Layers","text":"<p>Layers are represented by YAML file. They are just collection of a particular types of annotations with some attributes. Here is the example of Correction layer:</p> <pre><code>id: 2ea1861be051406a858307cd592ef5ec\nannotation_type: Correction\nrevision: '00001'\nannotations:\n  1e19a11e32d54d7897021d5be594d563:\n    correction: \u0f58\u0f46\u0f72\u0f60\u0f7c\u0f0b\n    certainty: null\n    span:\n      start: 145863\n      end: 145868\n  497e4044c77b4877a233a3c98b267672:\n    correction: \u0f58\u0f46\u0f72\u0f60\u0f7c\u0f0b\n    certainty: null\n    span:\n      start: 145966\n      end: 145971\n</code></pre>","location":"data/opf-format/#layers"},{"title":"Types of layer","text":"<pre><code>class LayerEnum(Enum):\n    index = \"index\"\n\n    book_title = \"BookTitle\"\n    sub_title = \"SubTitle\"\n    book_number = \"BookNumber\"\n    poti_title = \"PotiTitle\"\n    author = \"Author\"\n    chapter = \"Chapter\"\n\n    topic = \"Text\"\n    sub_topic = \"SubText\"\n\n    pagination = \"Pagination\"\n    citation = \"Citation\"\n    correction = \"Correction\"\n    error_candidate = \"ErrorCandidate\"\n    peydurma = \"Peydurma\"\n    sabche = \"Sabche\"\n    tsawa = \"Tsawa\"\n    yigchung = \"Yigchung\"\n    archaic = \"Archaic\"\n    durchen = \"Durchen\"\n    footnote = \"Footnote\"\n    segment = \"Segment\"\n</code></pre>","location":"data/opf-format/#types-of-layer"},{"title":"Index layer","text":"<p>similar to table of content, contains Text and SubText annotations.</p> <p>here is an example of index layer. <pre><code>id: 68f9113d7a7f4f97b1c61af77251e6d7\nannotation_type: index\nrevision: '00001'\nannotations:\n  51f58796058b461ab32f3c972ee5417c:\n    work_id: T1\n    parts:\n      3cbe647abf404688a79c24d14742826c:\n        work_id: T1-1\n        span:\n        - vol: 1\n          start: 27\n          end: 396711\n    span:\n    - vol: 1\n      start: 27\n      end: 934579\n</code></pre></p> <p>here is the live example of P000001</p>","location":"data/opf-format/#index-layer"},{"title":"Background and conceptual overview of the OpenPecha toolkit","text":"","location":"toolkit/background/"},{"title":"Intro and installation","text":"","location":"toolkit/introduction/"},{"title":"Intro","text":"","location":"toolkit/introduction/#intro"},{"title":"Installation","text":"<p>Stable version:</p>","location":"toolkit/introduction/#installation"},{"title":"<code>pip install openpecha</code>","text":"<p>Daily development version:</p>","location":"toolkit/introduction/#pip-install-openpecha"},{"title":"<code>pip install git+https://github.com/OpenPecha/Openpecha-Toolkit</code>","text":"","location":"toolkit/introduction/#pip-install-githttpsgithubcomopenpechaopenpecha-toolkit"},{"title":"Developer Installation","text":"<pre><code>git clone https://github.com/OpenPecha-dev/openpecha-toolkit.git\ncd openpecha-toolkit\npip install -r requirements-dev.txt\npip install -e .\npre-commit install\n</code></pre>","location":"toolkit/introduction/#developer-installation"},{"title":"Testing","text":"<pre><code>PYTHONPATH=.:$PYTHONPATH pytest tests\n</code></pre>","location":"toolkit/introduction/#testing"},{"title":"Layer","text":"","location":"toolkit/layer/"},{"title":"Create new Layer","text":"<p>use LayerEnum to create types of layer.</p> <pre><code>from openpecha.core.layer import Layer, LayerEnum\n\nlayer = Layer(annotation_type=LayerEnum.citation)\n\nassert layer.annotation_type == LayerEnum.citation\n</code></pre>","location":"toolkit/layer/#create-new-layer"},{"title":"Add Annotation to Layer","text":"<p>Refer Annotations docs about OpenPecha annotations.</p> <pre><code>from openpecha.core.annotations import Citation, Span\nfrom openpecha.core.layer import Layer, LayerEnum\n\nlayer = Layer(annotation_type=LayerEnum.citation)\nann = Citation(span=Span(start=10, end=20))\n\nlayer.set_annotation(ann)\n</code></pre>","location":"toolkit/layer/#add-annotation-to-layer"},{"title":"Get Annotation from layer","text":"<pre><code>from openpecha.core.annotations import Citation, Span\nfrom openpecha.core.layer import Layer, LayerEnum\n\nlayer = Layer(annotation_type=LayerEnum.citation)\nann = Citation(span=Span(start=10, end=20))\nann_id = layer.set_annotation(ann)\n\nnew_ann = layer.get_annotation(ann_id)\n</code></pre>","location":"toolkit/layer/#get-annotation-from-layer"},{"title":"Remove annotation from layer","text":"<pre><code>from openpecha.core.annotations import Citation, Span\nfrom openpecha.core.layer import Layer, LayerEnum\n\nlayer = Layer(annotation_type=LayerEnum.citation)\nann = Citation(span=Span(start=10, end=20))\nlayer.add_annotation(ann)\n\nassert ann.id in layer.annotations\n\nlayer.remove_annotation(ann.id)  # new\n\nassert ann.id not in layer.annotations\n</code></pre>","location":"toolkit/layer/#remove-annotation-from-layer"},{"title":"Bump layer revision number","text":"<pre><code>from openpecha.core.layer import Layer, LayerEnum\n\nlayer = Layer(annotation_type=LayerEnum.citation)\n\nassert layer.revision == \"00001\"\n\nlayer.bump_revision()\n\nassert layer.revision == \"00002\"\n</code></pre>","location":"toolkit/layer/#bump-layer-revision-number"},{"title":"Pecha Metadata","text":"","location":"toolkit/metadata/"},{"title":"Create Metadata for a Pecha","text":"<p>Since, OpenPecha as has three types of pecha, we have metadata classes to create metadata for each type of pecha. Here is the list of pecha types with it's associated metadata class.</p>    Pecha Type ID format Metadata Class     Initial I######## <code>openpecha.core.metadata.InitialPechaMetadata</code>   Diplomatic D######## <code>openpecha.core.metadata.DiplomaticPechaMetadata</code>   Open O######## <code>openpecha.core.metadata.OpenPechaMetadata</code>   Alignment A######## ``   Collection C######## ``    <p>here is an example to create metadata for Initial Pecha type</p> <pre><code>from openpecha.core.metadata import InitialCreationType, InitialPechaMetadata\n\nmetadata = InitialPechaMetadata(\n    source=\"https://library.bdrc.io\",\n    source_file=\"https://library.bdrc.io/text.json\",\n    initial_creation_type=InitialCreationType.ocr,\n    parser=\"https://github.com/OpenPecha-dev/openpecha-toolkit/pgoogle_orc.py\",\n    source_metadata={\n        \"id\": \"bdr:W1PD90121\",\n        \"title\": \"\u0f58\u0f60\u0f7c\u0f0b\u0f62\u0fab\u0f7c\u0f44\u0f0b\u0f42\u0f72\u0f0b\u0f66\u0f0b\u0f46\u0f60\u0f72\u0f0b\u0f58\u0f72\u0f44\u0f0b\u0f56\u0f4f\u0f74\u0f66\u0f0d\",\n        \"author\": \"author name\",\n    },\n)\n\n\nassert metadata.id.startswith(\"I\")\n</code></pre>  <p>Attention</p> <p>Only the <code>initial_creation_type</code> attribute is required, rest of the attributes are optional.</p>   <p>Attention</p> <p>No need to assign pecha id when creating metadata, the metadata class will automatically create id with correct id prefix for a particular pecha type.</p>","location":"toolkit/metadata/#create-metadata-for-a-pecha"},{"title":"Examples","text":"<p>all developers should follow schema for <code>source_metadata</code> and <code>base</code> as in given examples</p>","location":"toolkit/metadata/#examples"},{"title":"Initial Pecha Metadata","text":"<pre><code>id: I7E1A43F2\nsource: https://library.bdrc.io\nsource_file: null\ninitial_creation_type: ocr\nimported: '2020-03-28T12:12:38+00:00'\nlast_modified: '2022-06-08T11:28:52.590761+00:00'\nparser: https://github.com/OpenPecha-dev/openpecha-toolkit/blob/231bba39dd1ba393320de82d4d08a604aabe80fc/openpecha/formatters/google_orc.py\nocr_word_median_confidence_index: 0.9\nsource_metadata:\n    id: bdr:W3CN4314\n    title: \u0f5a\u0f51\u0f0b\u0f58\u0f0b\u0f62\u0f72\u0f42\u0f66\u0f0b\u0f54\u0f60\u0f72\u0f0b\u0f42\u0f4f\u0f7a\u0f62\u0f0b\u0f42\u0fb1\u0f72\u0f0b\u0f62\u0fa9\u0f0b\u0f56\u0f0d\n    author: ''\n    access: http://purl.bdrc.io/admindata/AccessOpen\n    restrictedInChina: false\nbase:\n    529C:\n      source_metadata:\n          image_group_id: I3CN8548\n          title: ''\n          total_pages: 62\n      order: 1\n      base_file: 529C.txt\n      ocr_word_median_confidence_index: 0.9\n</code></pre>","location":"toolkit/metadata/#initial-pecha-metadata"},{"title":"Adding Copyright and License","text":"<p>here is an example to add copyright and license in pecha's metadata</p> <pre><code>from openpecha.core.metadata import (\n    Copyright,\n    CopyrightStatus,\n    InitialCreationType,\n    LicenseType,\n    PechaMetadata,\n)\n\ncopyright = Copyright(\n    status=CopyrightStatus.COPYRIGHTED,\n    notice=\"Copyright 2022 OpenPecha\",\n    info_url=\"https://dev.openpecha.org/terms-and-conditions\",\n)\n\nmetadata = PechaMetadata(\n    initial_creation_type=InitialCreationType.input,\n    copyright=copyright,\n    license=LicenseType.CC_BY_NC_SA,\n)\n\nprint(metadata)\n</code></pre>","location":"toolkit/metadata/#adding-copyright-and-license"},{"title":"Copyright Status","text":"<p>OpenPecha provides three Copyright Status:</p> <ul> <li><code>CopyrightStatus.UNKNOWN</code>, use if the Copyright of the pecha is unknown.</li> <li><code>CopyrightStatus.COPYRIGHTED</code>, use if the pecha source is Copyright restricted.</li> <li><code>CopyRightStatus.PUBLIC_DOMAIN</code>, use if the pecha source is in Public Domain.</li> </ul>","location":"toolkit/metadata/#copyright-status"},{"title":"Licenses","text":"<p>OpenPecha relies on Creative Common Licenses for licensing any pecha on OpenPecha Repository,</p> <p>We can access Creative Common Licenses through <code>LicenseType</code> enum.</p>","location":"toolkit/metadata/#licenses"},{"title":"Pecha","text":"","location":"toolkit/pecha/"},{"title":"Create new pecha","text":"<pre><code>from openpecha.core.annotations import Citation, Span\nfrom openpecha.core.layer import Layer, LayerEnum\nfrom openpecha.core.metadata import InitialCreationType, InitialPechaMetadata\nfrom openpecha.core.pecha import OpenPechaFS\n\n# create new pecha\nmetadata = InitialPechaMetadata(initial_creation_type=InitialCreationType.input)\npecha = OpenPechaFS(metadata=metadata)\n\n# create a simple layer\nann = Citation(span=Span(start=10, end=20))\nlayer = Layer(annotation_type=LayerEnum.citation)\nlayer.set_annotation(ann)\n\nbase_name = pecha.set_base(\"base content\")\npecha.set_layer(base_name, layer)\n\n# pecha.save()\n</code></pre> <p>When we are creating a brand new pecha, first we must create an instance of <code>PechaMetadata</code>, which will automatically issue a unique id for the pecha and allow us to specify other metadata about the pecha.</p> <p>Then, we will use this metadata object to create pecha container, instance of <code>OpenPechaFS</code>.</p> <p>After adding base and layer(s) we need to call <code>pecha.save()</code> to save pecha to file system in OpenPecha Format.</p>","location":"toolkit/pecha/#create-new-pecha"},{"title":"Adding Base and Layer","text":"<p>Refer layer docs to how to create layer.</p> <pre><code>from openpecha.core.annotations import Citation, Span\nfrom openpecha.core.layer import Layer, LayerEnum\nfrom openpecha.core.pecha import OpenPechaFS\n\npecha = OpenPechaFS(path=\"&lt;path_to_pecha&gt;\")\n\n# create a simple layer\nann = Citation(span=Span(start=10, end=20))\nlayer = Layer(annotation_type=LayerEnum.citation)\nlayer.set_annotation(ann)\n\nbase_name = pecha.set_base(\"base content\", metadata={\"title\": \"title\", \"order\": 1})\npecha.set_layer(base_name, layer)\n\npecha.save()\n\nassert pecha.layers[base_name][LayerEnum.citation].id == layer.id\n</code></pre> <p>After successfully parsing the input, you should be able to get base text and layers.</p> <p>Since, layers are based on the base text, first you need to set base to <code>pecha</code> with <code>pecha.set_base('base content</code>) which will return <code>base_name</code>, which is identifier for base and it's associated layers. Then you use <code>base_name</code> to set layer to <code>pecha</code>.</p> <p>Notice, you can also set base metadata with <code>metadata</code> argument in <code>pecha.set_base()</code> method.</p> <p>After adding all the bases and layer, call <code>pecha.save()</code> to save bases and layers.</p>","location":"toolkit/pecha/#adding-base-and-layer"},{"title":"Update Base layer","text":"<p>In order to update a base, we need to know the <code>base_name</code> of base that we want to update.</p> <pre><code>from openpecha.core.pecha import OpenPechaFS\n\npecha = OpenPechaFS(path=\"&lt;path_to_pecha&gt;\")\n\npecha.update_base(\"v001\", \"new content\")\npecha.save()\n</code></pre>","location":"toolkit/pecha/#update-base-layer"},{"title":"Toolkit quickstart","text":"","location":"toolkit/quickstart/"}]}